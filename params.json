{
  "name": "ikasoa",
  "tagline": "ikasoa是一套SOA服务化治理解决方案.其中ikasoa-rpc是ikasoa的开源RPC框架,基于apache thrift开发,客户端可以像调用本地接口那样去调用远程接口.",
  "body": "![](https://raw.githubusercontent.com/venwyhk/ikasoa/master/ikasoalogo_small.png)<br />&nbsp;<b>Ikamobile Service Oriented Architecture</b>\r\n\r\n&nbsp;[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.ikasoa/ikasoa-rpc/badge.svg?style=plastic)](https://maven-badges.herokuapp.com/maven-central/com.ikasoa/ikasoa-rpc)&nbsp;&nbsp;[![](https://codeship.com/projects/9cf2f150-1507-0134-ee57-3adebfc67210/status?branch=master)](https://codeship.com/projects/157977)&nbsp;&nbsp;\r\n\r\n***\r\n\r\n* [概述](#概述)\r\n* [开发运行环境要求](#开发运行环境要求)\r\n* [目录说明](#目录说明)\r\n* [环境搭建](#环境搭建)\r\n* [HelloWorld](#helloworld)\r\n* [使用示例](#使用示例)\r\n* [Thrift使用示例](#Thrift使用示例)\r\n* [服务实现类型](#服务实现类型)\r\n* [负载均衡](#负载均衡)\r\n* [序列化](#序列化)\r\n* [注意事项](#注意事项)\r\n\r\n</br>\r\n\r\n## 概述 ##\r\n\r\n  ikasoa是一套SOA服务化治理解决方案.其中ikasoa-rpc是ikasoa的开源RPC框架,基于apache thrift开发,客户端可以像调用本地接口那样去调用远程接口.\r\n\r\n## 开发运行环境要求 ##\r\n\r\n- 要求java运行环境为java8\r\n\r\n## 目录说明 ##\r\n\r\n- ikasoa-admin:*服务管理相关代码(利用Zookeeper注册和管理服务)*\r\n\r\n- ikasoa-core:*基础核心包*\r\n\r\n- ikasoa-rpc:*实现RPC功能的代码*\r\n\r\n- ikasoa-example:*示例代码*\r\n\r\n## 环境搭建 ##\r\n\r\n##### Maven配置 #####\r\n\r\n  需要修改pom.xml文件,添加ikasoa-rpc的依赖:\r\n    \r\npom.xml\r\n```xml\r\n    ......\r\n    <dependency>\r\n        <groupId>com.ikasoa</groupId>\r\n        <artifactId>ikasoa-rpc</artifactId>\r\n        <version>0.3-ALPHA</version>\r\n    </dependency>\r\n    ......\r\n```\r\n\r\n##### Maven配置(ikasoa-core) #####\r\n\r\n  如果仅使用thrift兼容方式,则可以只添加ikasoa-core依赖:\r\n\r\npom.xml\r\n```xml\r\n    ......\r\n    <dependency>\r\n        <groupId>com.ikasoa</groupId>\r\n        <artifactId>ikasoa-core</artifactId>\r\n        <version>0.4.4</version>\r\n    </dependency>\r\n    ......\r\n```\r\n\r\n##### 导入工程&编译代码 #####\r\n\r\n  工程目录下命令行执行”mvn eclipse:eclipse”,并导入eclipse.(如果IDE非eclipse,则使用相对应的方式导入)\r\n\r\n  执行命令”mvn clean package”打包.\r\n\r\n## HelloWorld ##\r\n\r\n##### 创建接口和实现 #####\r\n\r\n  新建例子接口(ExampleService.java),对象(ExampleVO.java)和实现 (ExampleServiceImpl.java)类:\r\n\r\nExampleService.java\r\n```java\r\n    package com.ikamobile.ikasoa.example.rpc;\r\n    public interface ExampleService {\r\n        // 查询对象\r\n        public ExampleVO findVO(int id);\r\n    }\r\n```\r\n\r\nExampleServiceImpl.java\r\n```java\r\n    package com.ikamobile.ikasoa.example.rpc;\r\n    public class ExampleServiceImpl implements ExampleService {\r\n        @Override\r\n        public ExampleVO findVO(int id) {\r\n            return new ExampleVO(id, “helloworld”);\r\n        }\r\n    }\r\n```\r\n\r\nExampleVO.java\r\n```java\r\n    package com.ikamobile.ikasoa.example.rpc;\r\n    public class ExampleVO {\r\n        private int id;\r\n        private String string;\r\n        public ExampleVO() {\r\n        }\r\n        public ExampleVO(int id, String string) {\r\n            this.id = id;\r\n            this.string = string;\r\n        }\r\n        public int getId() {\r\n            return id;\r\n        }\r\n        public void setId(int id) {\r\n            this.id = id;\r\n        }\r\n        public String getString() {\r\n            return string;\r\n        }\r\n        public void setString(String string) {\r\n            this.string = string;\r\n        }\r\n    }\r\n```\r\n\r\n##### 创建执行类 #####\r\n\r\nMain.java\r\n```java\r\n    package com.ikamobile.ikasoa.example.rpc;\r\n    import com.ikamobile.ikasoa.rpc.DefaultIkasoaFactory;\r\n    import com.ikamobile.ikasoa.rpc.IkasoaException;\r\n    import com.ikamobile.ikasoa.rpc.IkasoaFactory;\r\n    import com.ikamobile.ikasoa.rpc.IkasoaServer;\r\n    public class Main {\r\n        public static void main(String[] args) {\r\n            IkasoaFactory ikasoaFactory = new DefaultIkasoaFactory();\r\n            try {\r\n                // 获取Ikasoa服务\r\n                IkasoaServer ikasoaServer = ikasoaFactory.getIkasoaServer(ExampleServiceImpl.class, 9999);\r\n                // 服务端启动服务\r\n                ikasoaServer.run();\r\n                Thread.sleep(100);\r\n                // 客户端获取远程接口实现\r\n                ExampleService es = ikasoaFactory.getIkasoaClient(ExampleService.class, \"localhost\", 9999);\r\n                // 客户端输出结果\r\n                System.out.println(es.findVO(1).getString());\r\n                // 服务端停止服务\r\n                ikasoaServer.stop();\r\n            } catch (IkasoaException e) {\r\n                e.printStackTrace();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n##### 执行Main.java #####\r\n\r\n  如输出“helloworld”则表示执行成功.\r\n\r\n  *可参考ikasoa-example的示例.*\r\n\r\n## 使用示例 ##\r\n\r\n  *此示例程序需要使用到Spring框架.*\r\n\r\n##### 服务端例子 #####\r\n\r\nbean.xml\r\n```xml\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd\">\r\n        ......\r\n        <!-- 服务端配置 -->\r\n        <bean id=\"rpcServer\" class=\"example.ikasoa.RpcServer\" init-method=\"run\" destroy-method=\"stop\">\r\n            <constructor-arg index=\"0\" ref=\"ikasoaFactory\"/>\r\n            <constructor-arg index=\"1\">\r\n                <value>9993</value><!-- 设置服务开放端口 -->\r\n            </constructor-arg>\r\n        </bean>\r\n        <bean id=\"ikasoaFactory\" class=\"com.ikamobile.ikasoa.core.DefaultIkasoaFactory\"/>\r\n        ......\r\n    </beans>\r\n```\r\n\r\nRpcServer.java\r\n```java\r\n    package example.ikasoa;\r\n    import com.ikamobile.ikasoa.rpc.IkasoaException;\r\n    import com.ikamobile.ikasoa.rpc.IkasoaFactory;\r\n    import com.ikamobile.ikasoa.rpc.IkasoaServer;\r\n    public class RpcServer {\r\n        private IkasoaServer server;\r\n        public RpcServer(IkasoaFactory ikasoaFactory, int serverPort) throws IkasoaException {\r\n            // 实现类不能是抽象类\r\n            this.server = ikasoaFactory.getIkasoaServer(ExampleServiceImpl.class, serverPort);\r\n            // 如果已有实例化后的对象(例如通过Spring注入的对象),则可以通过ImplClsCon类进行封装,ikasoa-rpc将会直接引用该类的实例,而不会重新实例化.\r\n            // 例子如下:\r\n            // this.server = ikasoaFactory.getIkasoaServer(new ImplClsCon(ExampleServiceImpl.class, exampleServiceImpl), serverPort);\r\n            // 如有多个接口实现,可以传入List.\r\n            // 例子如下:\r\n            // List<ImplClsCon> sList = new ArrayList<ImplClsCon>();\r\n            // sList.add(new ImplClsCon(ExampleServiceImpl.class));\r\n            // sList.add(new ImplClsCon(Example2ServiceImpl.class));\r\n            // IkasoaServer ikasoaServer = ikasoaFactory.getIkasoaServer(sList, port);\r\n            System.out.println(\"服务端口:\" + serverPort);\r\n            for (String key : this.server.getIkasoaServiceKeys()) {\r\n                System.out.println(\"加载服务:\" + key);\r\n            }\r\n        }\r\n        public void run() {\r\n            server.run();\r\n        }\r\n        public void stop() {\r\n            server.stop();\r\n        }\r\n    }\r\n```\r\n\r\n##### 客户端例子 #####\r\n\r\nRpcClient.java\r\n```java\r\n    package example.ikasoa;\r\n    import com.ikamobile.ikasoa.rpc.DefaultIkasoaFactory;\r\n    public class RpcClient {\r\n        public static void main(String[] args) {\r\n            // 如果接口之间有继承关系,则只需要配置子接口类\r\n            // 设置服务器地址为”hocalhost”,端口为9993\r\n            ExampleService es = new DefaultIkasoaFactory().getIkasoaClient(ExampleService.class, \"localhost\", 9993);\r\n            // 如果有多个服务提供者,服务器地址和端口也可以传入List,系统将自动执行负载均衡(默认负载均衡规则为轮询,此外还支持随机,详见'负载均衡'文档目录).\r\n            // 例子如下:\r\n            //  List<ServerInfo> serverInfoList = new ArrayList<ServerInfo>();\r\n            //  serverInfoList.add(new ServerInfo(\"localhost\", 9993));\r\n            //  serverInfoList.add(new ServerInfo(\"192.168.1.41\", 9993));\r\n            //  ExampleService es = new DefaultIkasoaFactory().getIkasoaClient(ExampleService.class, serverInfoList);\r\n            System.out.println(es.findVO(1).getString());\r\n        }\r\n    }\r\n```\r\n\r\n##### 执行RpcClient.java #####\r\n\r\n  如输出”helloword”则表示执行成功.\r\n\r\n## Thrift使用示例 ##\r\n\r\n##### 客户端调用Thrift服务端例子 #####\r\n\r\nThriftClientDemo.java\r\n```java\r\n    package example.ikasoa;\r\n    import org.apache.thrift.transport.TTransport;\r\n    import org.apache.thrift.transport.TTransportFactory;\r\n    import com.ikamobile.ikasoa.core.thrift.client.ThriftClient;\r\n    import com.ikamobile.ikasoa.core.thrift.client.ThriftClientConfiguration;\r\n    import com.ikamobile.ikasoa.rpc.DefaultIkasoaFactory;\r\n    import com.ikamobile.tmcs.controller.thrift.server.acceptor.GeneralThriftAcceptor;\r\n    public class ThriftClientDemo {\r\n        public static void main(String[] args) {\r\n            ThriftClientConfiguration configuration = new ThriftClientConfiguration();\r\n            configuration.setTransportFactory(new TTransportFactory()); // 协议需要与服务端匹配\r\n            // 如果只依赖ikasoa-core,这里也可以使用com.ikamobile.ikasoa.core.thrift.GeneralFactory来替代DefaultIkasoaFactory\r\n            ThriftClient thriftClient = new DefaultIkasoaFactory(configuration).getThriftClient(\"121.40.119.240\", 9201); // 配置Thrift的服务器地址和端口\r\n            TTransport transport = null;\r\n            try {\r\n                transport = thriftClient.getTransport();\r\n                transport.open();\r\n                // GeneralThriftAcceptor为IDL中配置的service\r\n                GeneralThriftAcceptor.Client client = new GeneralThriftAcceptor.Client(\r\n                thriftClient.getProtocol(transport, \"GeneralThriftAcceptor\")); // 参数\"GeneralThriftAcceptor\"为服务的key,如果没有则可以不传\r\n                // 打印结果\r\n                System.out.println(client.getTmc(1));\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                transport.close();\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n##### Spring配置Thrift服务端例子 #####\r\n\r\n```xml\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\r\n        ......\r\n        <!-- Thrift服务配置 -->\r\n        <bean id=\"thriftServer2\" class=\"com.ikamobile.ikasoa.core.thrift.server.impl.DefaultThriftServerImpl\" init-method=\"run\" destroy-method=\"stop\">\r\n            <property name=\"serverName\" value=\"xxxServer\" /><!-- 服务名称 -->\r\n            <property name=\"serverPort\" value=\"9899\" /><!-- 服务端口 -->\r\n            <property name=\"thriftServerConfiguration\">\r\n                <bean class=\"com.ikamobile.ikasoa.core.thrift.server.ThriftServerConfiguration\">\r\n                    <property name=\"transportFactory\"><!-- 指定传输协议工厂(可选,默认为TFramedTransport.Factory) -->\r\n                        <bean class=\"org.apache.thrift.transport.TTransportFactory\" />\r\n                    </property>\r\n                </bean>\r\n            </property>\r\n            <property name=\"processor\">\r\n                <bean class=\"com.ikamobile.xxx.service.ThriftService.Processor\"><!-- ThriftService为通过idl生成的服务类 -->\r\n                    <constructor-arg ref=\"thriftService\" />\r\n                </bean>\r\n            </property>\r\n        </bean>\r\n        <bean id=\"thriftService\" class=\"com.ikamobile.xxx.ThriftServiceImpl\"/><!-- ThriftService.Iface接口的实现 -->\r\n        ......\r\n    </beans>\r\n```\r\n\r\n##### Spring配置Thrift服务端例子(嵌套方式) #####\r\n\r\n```xml\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\r\n        ......\r\n        <!-- Thrift服务配置(嵌套方式) -->\r\n        <bean id=\"thriftServer1\" class=\"com.ikamobile.ikasoa.core.thrift.server.impl.DefaultThriftServerImpl\" init-method=\"run\" destroy-method=\"stop\">\r\n            <property name=\"serverName\" value=\"xxxServer\" /><!-- 服务名称 -->\r\n            <property name=\"serverPort\" value=\"9898\" /><!-- 服务端口 -->\r\n            <property name=\"thriftServerConfiguration\">\r\n                <bean class=\"com.ikamobile.ikasoa.core.thrift.server.ThriftServerConfiguration\">\r\n                    <property name=\"transportFactory\"><!-- 指定传输协议工厂(可选,默认为TFramedTransport.Factory) -->\r\n                        <bean class=\"org.apache.thrift.transport.TTransportFactory\" />\r\n                    </property>\r\n                </bean>\r\n            </property>\r\n            <property name=\"processor\">\r\n                <bean class=\"com.ikamobile.ikasoa.core.thrift.server.MultiplexedProcessor\">\r\n                    <constructor-arg>\r\n                        <map>\r\n                            <entry key=\"Service1\"><!-- 这里的key可以随便取,保证唯一就行,Client调用的时候需要用 -->\r\n                                <bean class=\"com.ikamobile.xxx.service.ThriftService1.Processor\"><!-- ThriftService1和ThriftService2为通过idl生成的服务类 -->\r\n                                    <constructor-arg ref=\"thriftService1\" />\r\n                                </bean>\r\n                            </entry>\r\n                            <entry key=\"Service2\">\r\n                                <bean class=\"com.ikamobile.xxx.service.ThriftService2.Processor\">\r\n                                    <constructor-arg ref=\"thriftService2\" />\r\n                                </bean>\r\n                            </entry>\r\n                        </map>\r\n                    </constructor-arg>\r\n                </bean>\r\n            </property>\r\n        </bean>\r\n        <bean id=\"thriftService1\" class=\"com.ikamobile.xxx.ThriftService1Impl\"/><!-- ThriftService1.Iface接口的实现 -->\r\n        <bean id=\"thriftService2\" class=\"com.ikamobile.xxx.ThriftService2Impl\"/><!-- ThriftService2.Iface接口的实现 -->\r\n        ......\r\n    </beans>\r\n```\r\n\r\n## 服务实现类型 ##\r\n\r\n  *Ikasoa默认使用Thrift作为服务类型的实现,但也提供了Netty以供选择.*\r\n\r\n##### 使用Thrift服务 #####\r\n\r\n```java\r\n    ......\r\n    IkasoaFactory ikasoaFactory = new DefaultIkasoaFactory();\r\n    ......\r\n```\r\n\r\n##### 使用Netty服务 #####\r\n\r\n```java\r\n    ......\r\n    IkasoaFactory ikasoaFactory = new NettyIkasoaFactory();\r\n    ......\r\n```\r\n\r\n## 负载均衡 ##\r\n\r\n  *Ikasoa提供了2种负载均衡,分别为轮循(含权重)和随机,默认使用轮循.*\r\n\r\n##### 使用轮循负载均衡(默认) #####\r\n\r\n```java\r\n    ......\r\n    XService xs = new DefaultIkasoaFactory().getIkasoaClient(XService.class, serverInfoList);\r\n    // 也可以写为如下方式:\r\n    // Class loadBalanceClass = Class.forName(\"com.ikamobile.ikasoa.core.loadbalance.impl.PollingLoadBalanceImpl\");\r\n    // XService xs = new DefaultIkasoaFactory().getIkasoaClient(XService.class, serverInfoList, loadBalanceClass);\r\n    ......\r\n```\r\n\r\n  *serverInfoList中的元素对象com.ikamobile.ikasoa.core.loadbalance.ServerInfo定义了单个服务信息,其中weightNumber属性为权重值,用于轮循负载均衡.*\r\n\r\n##### 使用随机负载均衡 #####\r\n\r\n```java\r\n    ......\r\n    Class loadBalanceClass = Class.forName(\"com.ikamobile.ikasoa.core.loadbalance.impl.RandomLoadBalanceImpl\");\r\n    XService xs = new DefaultIkasoaFactory().getIkasoaClient(XService.class, serverInfoList, loadBalanceClass);\r\n    ......\r\n```\r\n\r\n##### 自定义负载均衡 #####\r\n\r\n  创建自定义序列化类(例如com.xxx.XLoadBalanceImpl).\r\n\r\n  自定义序列化类(com.xxx.XLoadBalanceImpl)需实现接口 com.ikamobile.ikasoa.core.loadbalance.LoadBalance.\r\n\r\n  通过如下方式获取服务:\r\n\r\n```java\r\n    ......\r\n    Class loadBalanceClass = Class.forName(\"com.xxx.XLoadBalanceImpl\");\r\n    XService xs = new DefaultIkasoaFactory().getIkasoaClient(XService.class, serverInfoList, loadBalanceClass);\r\n    ......\r\n```\r\n\r\n## 序列化 ##\r\n\r\n*Ikasoa提供了3种序列化方式,分别为fastjson,xml,kryo,默认使用fastjson.*\r\n\r\n##### 使用fastjson作为序列化方式(默认) #####\r\n\r\n```java\r\n    ......\r\n    IkasoaFactory ikasoaFactory = new DefaultIkasoaFactory();\r\n    // 也可以写为如下方式:\r\n    // Class protocolHandlerClass = Class.forName(\"com.ikamobile.ikasoa.rpc.handler.impl.JsonProtocolHandlerImpl\");\r\n    // IkasoaFactory ikasoaFactory = new DefaultIkasoaFactory(new Configurator(protocolHandlerClass));\r\n    ......\r\n```\r\n\r\n##### 使用xml作为序列化方式 #####\r\n\r\n```java\r\n    ......\r\n    Class protocolHandlerClass = Class.forName(\"com.ikamobile.ikasoa.rpc.handler.impl.XmlProtocolHandlerImpl\");\r\n    IkasoaFactory ikasoaFactory = new DefaultIkasoaFactory(new Configurator(protocolHandlerClass));\r\n    ......\r\n```\r\n\r\n##### 使用kryo作为序列化方式 #####\r\n\r\n```java\r\n    ......\r\n    Class protocolHandlerClass = Class.forName(\"com.ikamobile.ikasoa.rpc.handler.impl.KryoProtocolHandlerImpl\");\r\n    IkasoaFactory ikasoaFactory = new DefaultIkasoaFactory(new Configurator(protocolHandlerClass));\r\n    ......\r\n```\r\n\r\n##### 自定义序列化方式 #####\r\n\r\n  创建自定义序列化类(例如com.xxx.XProtocolHandlerImpl).\r\n\r\n  自定义序列化类(com.xxx.XProtocolHandlerImpl)需实现接口com.ikamobile.ikasoa.rpc.handler.ProtocolHandler.\r\n\r\n  通过如下方式获取IkasoaFactory:\r\n\r\n```java\r\n    ......\r\n    Class protocolHandlerClass = Class.forName(\"com.xx.XProtocolHandlerImpl\");\r\n    IkasoaFactory ikasoaFactory = new DefaultIkasoaFactory(new Configurator(protocolHandlerClass));\r\n    ......\r\n```\r\n\r\n## 注意事项 ##\r\n\r\n- 使用fastjson作为序列化方式时,fastjson依赖版本建议与ikasoa所依赖的版本一致(当前为1.2.12).否则可能出现服务名不能匹配,无法调用服务的情况.\r\n\r\n- 使用kryo作为序列化方式时,如果参数或返回值以父类(或抽象类)的形式传递,转换为子类时可能会丢失子类属性值,建议尽量以子类形式传递参数.fastjson方式非集合类参数或返回值没有问题,xml方式都没有问题.\r\n\r\n- 使用fastjson作为序列化方式时,传递的Bean对象必须要有默认构造方法(建议使用类似lombok这样的工具来处理Bean对象).\r\n\r\n- 使用kryo作为序列化方式时,暂不支持自定义异常对象,如果抛出自定义异常对象,异常类型不能正确识别.\r\n\r\n- 部分单元测试需要启动Socket,执行单元测试时请确保相关端口可用.\r\n\r\n***\r\n\r\n*larry7696@gmail.com | 2016-09-01*\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}